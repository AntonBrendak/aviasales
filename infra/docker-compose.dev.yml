services:
  postgres:
    image: postgres:16
    container_name: air_pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: air
      TZ: Europe/Berlin
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d air"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d

  redis:
    image: redis:7
    container_name: air_redis
    command: ["redis-server", "--appendonly", "yes"]
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  kafka:
    image: bitnami/kafka:3.7
    container_name: air_kafka
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports: ["9092:9092", "29092:29092"]
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20
    volumes: [ "kafkadata:/bitnami/kafka" ]
    depends_on:
      postgres:
        condition: service_healthy

  opensearch:
    image: opensearchproject/opensearch:2.13.0
    environment:
      discovery.type: "single-node"
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: "Falcon#27Skies"
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
    ulimits:
      memlock: { soft: -1, hard: -1 }
    ports: ["9200:9200","9600:9600"]

  dashboards:
    image: opensearchproject/opensearch-dashboards:2.13.0
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'
      OPENSEARCH_USERNAME: "admin"
      OPENSEARCH_PASSWORD: "Falcon#27Skies"
      OPENSEARCH_SSL_VERIFICATIONMODE: "none"
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "5601"
    depends_on:
      - opensearch
    ports: ["5601:5601"]
        

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: air_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    ports: ["9000:9000","9001:9001"]
    volumes: [ "miniodata:/data" ]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  temporal:
    image: temporalio/auto-setup:1.23.0
    container_name: air_temporal
    environment:
      DB: postgresql
      DB_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PWD: postgres
      POSTGRES_SEEDS: postgres
      DYNAMIC_CONFIG_FILE_PATH: config/dynamicconfig/development.yaml
    ports: ["7233:7233"]
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig

  temporal-ui:
    image: temporalio/ui:2.21.0
    container_name: air_temporal_ui
    environment:
      TEMPORAL_ADDRESS: temporal:7233
    ports: ["8088:8080"]
    depends_on:
      temporal:
        condition: service_started

  jaeger:
    image: jaegertracing/all-in-one:1.57
    command: ["--collector.otlp.enabled=true"]
    ports: ["16686:16686","14250:14250","14268:14268"]
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:16686 || curl -sf http://localhost:16686 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60

  otel-collector:
    depends_on:
      jaeger:
        condition: service_started
    image: otel/opentelemetry-collector:0.98.0
    container_name: air_otel
    command: ["--config=/etc/otel-collector.yaml"]
    volumes: ["./otel-collector.yaml:/etc/otel-collector.yaml:ro"]
    ports: ["4317:4317","4318:4318"]

volumes:
  pgdata: {}
  kafkadata: {}
  miniodata: {}